Packages
Package is a collection of source files in the same directory that are executed together.
Every Go program is made up of packages.

- fmt package:
fmt is a Go package that is used to format basic strings, values, inputs, and outputs.
It can also be used to print and write from the terminal.
Additionally, Go has formats called verbs. A verb is a placeholder for a named value to be formatted.

Let’s take a look at some of them:

%v represents the named value in its default format
%+v: When printing structs, the plus flag (%+v) adds field names.
%#v: A Go-syntax representation of the value.
%T represents the type of the value
%d expects value to be an integer type of base 10
%b expects value to be an integer type of base 2
%s the bytes of string or slice
%f expects value to have a float type

Required import for fmt package
In order to start using the fmt package, we will have to import it into our code:
import "fmt"

Functions in the fmt package
Below are some of the functions the package provides, along with their descriptions:

fmt.Print()
fmt.Print() prints whatever it gets to the terminal without adding any space or newlines unless it’s unequivocally coded.

Spaces are added when the arguments are not strings.

package main

import "fmt"

func main() {
    fmt.Print("Hello")
    fmt.Print("World")
}

fmt.Printf()
fmt.Printf() provides custom formatting of input strings using one or more verbs 
and then prints the formatted string to the terminal without appending any space or newlines (unless explicitly coded).

package main

import "fmt"

func main() {
    year := 2001

    fmt.Printf("I was born in %d", year)

}

fmt.Println()
fmt.Println() is similar to fmt.Print(), the difference being that it adds spaces between arguments and appends a newline at the end.

package main

import "fmt"

func main() {
    fmt.Println("Hello", "World")

    fmt.Println("welcome to my world!")

}

fmt.Sprint()
The fmt.Sprint() function formats and returns the input string without printing anything to the terminal.

package main

import "fmt"

func main() {
    a := fmt.Sprint("Hello World")
    b := fmt.Sprint("Hello", "World")

    fmt.Println(a)
    fmt.Println(b)

}

In our code, notice how calling the fmt.Sprint() function doesn’t print anything. Instead, it returns two values that we store in variables “a” and “b”. In order to see the values, we have to use a print statement.

fmt.Sprintln()
fmt.Sprintln() is similar in function to fmt.Sprint(), except that it automatically adds spaces between arguments.
package main

import "fmt"

func main() {
    a := fmt.Sprintln("Hello","World")

    fmt.Println(a)

}

fmt.Sprintf()
fmt.Sprintf() is used to format an input string. It also works like fmt.Printf(), the significant distinction being that fmt.Sprintf() returns the value as opposed to printing it out.

package main

import "fmt"

func main() {
    name := "Chisom"
    s := fmt.Sprintf("My name is %s", name)

    fmt.Print(s)

}

fmt.Scan()
fmt.Scan() collects user input from the standard input and stores this in successive arguments. Spaces or newlines are considered multiple values and are stored in multiple arguments. This function anticipates that an address of each argument should be passed.

package main

import "fmt"

func main() {
    var name string

	fmt.Println("What's your name?")

	fmt.Scan(&name)

	fmt.Println("Nice to meet you", name)

}
fmt.Scanf()
fmt.Scanf() reads text from the standard input and puts away progressive space-separated values into progressive arguments as specified by the format. It also expects an address of each argument to be passed.

package main

import "fmt"

func main() {
    var name string

	fmt.Printf("What's your name: ")

	fmt.Scanf("%s",&name)

	fmt.Printf("Your name is %s\n", name)
}

fmt.Scanln()
fmt.Scanln() functions similarly to fmt.Scan, but it stops scanning at a newline. This means that after the last item, there must be a newline or EOF.

package main

import "fmt"

func main() {
  	var  z int

	fmt.Scanln(&z)

	fmt.Printf("Scanln: Z = %d\n", z)
}

The formatted I/O functions in Golang include, but are not limited to only the ones discussed above.

A Tour of Go

Let's consider this code:

package main

import (
	"fmt"
	"math/rand"
)

func main() {
	fmt.Println("My favorite number is", rand.Intn(10))
}


Programs start running in package main.
This program is using the packages with import paths "fmt" and "math/rand".

By convention, the package name is the same as the last element of the import path. 
For instance, the "math/rand" package comprises files that begin with the statement package rand.

This code groups the imports into a parenthesized, "factored" import statement.

You can also write multiple import statements, like:

import "fmt"
import "math"
But it is good style to use the factored import statement.


In Go, a name is exported if it begins with a capital letter. For example, Pizza is an exported name, as is Pi, which is exported from the math package.

pizza and pi do not start with a capital letter, so they are not exported.

When importing a package, you can refer only to its exported names. Any "unexported" names are not accessible from outside the package.

Function:
A function can take zero or more arguments.

In this example, add takes two parameters of type int.

Notice that the type comes after the variable name.

package main

import "fmt"

func add(x int, y int) int {
	return x + y
}

func main() {
	fmt.Println(add(42, 13))
}

Note:
When two or more consecutive named function parameters share a type, you can omit the type from all but the last.

Note: A function can return any number of results.

Named return values
Go's return values may be named. If so, they are treated as variables defined at the top of the function.

These names should be used to document the meaning of the return values.

A return statement without arguments returns the named return values. This is known as a "naked" return.

Naked return statements should be used only in short functions. They can harm readability in longer functions.

Variables
The var statement declares a list of variables; as in function argument lists, the type is last.

A var statement can be at package or function level

Variables with initializers
A var declaration can include initializers, one per variable.

If an initializer is present, the type can be omitted; the variable will take the type of the initializer.

Short variable declarations
Inside a function, the := short assignment statement can be used in place of a var declaration with implicit type.

Outside a function, every statement begins with a keyword (var, func, and so on) and so the := construct is not available.

Basic types
Go's basic types are

bool

string

int  int8  int16  int32  int64
uint uint8 uint16 uint32 uint64 uintptr

byte // alias for uint8

rune // alias for int32
     // represents a Unicode code point

float32 float64

complex64 complex128
The example shows variables of several types, and also that variable declarations may be "factored" into blocks, as with import statements.

The int, uint, and uintptr types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems. When you need an integer 
value you should use int unless you have a specific reason to use a sized or unsigned integer type.

Zero values
Variables declared without an explicit initial value are given their zero value.

The zero value is:

0 for numeric types,
false for the boolean type, and
"" (the empty string) for strings.

Type conversions
The expression T(v) converts the value v to the type T.

Some numeric conversions:

var i int = 42
var f float64 = float64(i)
var u uint = uint(f)
Or, put more simply:

i := 42
f := float64(i)
u := uint(f)
Unlike in C, in Go assignment between items of different type requires an explicit 
conversion. Try removing the float64 or uint conversions in the example and see what happens.

Type inference:
When declaring a variable without specifying an explicit type
(either by using the := syntax or var = expression syntax),
the variable's type is inferred from the value on the right hand side.

When the right hand side of the declaration is typed, the new variable is of that same type:

var i int
j := i // j is an int
But when the right hand side contains an untyped numeric constant,
the new variable may be an int, float64, or complex128 depending on the precision of the constant:

i := 42           // int
f := 3.142        // float64
g := 0.867 + 0.5i // complex128

Constants:
Constants are declared like variables, but with the const keyword.

Constants can be character, string, boolean, or numeric values.

Constants cannot be declared using the := syntax.

Numeric Constants:
Numeric constants are high-precision values.

An untyped constant takes the type needed by its context.

Note: An int can store at maximum a 64-bit integer, and sometimes less.
